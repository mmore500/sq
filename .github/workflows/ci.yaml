name: HPCC Job Monitor

on:
  push:
    branches:
      - master
  schedule:
    - cron: "*/5 * * * *"  # every 5 minutes
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  fetch-jobs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Run job script on HPCC
        id: hpcc
        run: |
          set -e
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.USER }}@hpcc.msu.edu" 'bash -s' <<'EOF' | tee job_status.txt
          job_list=$(squeue --noheader -u "$USER" -o "%i|%j|%t|%M|%R")

          # --- Counters ---
          running_count=0
          pending_count=0
          held_count=0
          completing_count=0
          total_jobs_count=0
          declare -A category_counts
          declare -A category_num_jobs
          declare -A category_state_counts
          total_num_jobs=0

          # --- First pass: compute summaries ---
          while IFS='|' read -r job_id job_name state time nodelist; do
            total_jobs_count=$((total_jobs_count + 1))

            # Detect Held by user
            if [[ "$nodelist" == *"(JobHeldUser)"* ]]; then
              held_count=$((held_count + 1))
              category_label="Held"
            else
              case "$state" in
                R)  running_count=$((running_count + 1)); category_label="Running" ;;
                PD) pending_count=$((pending_count + 1)); category_label="Pending" ;;
                CG) completing_count=$((completing_count + 1)); category_label="Completing" ;;
                *)  category_label="$state" ;;
              esac
            fi

            # Parse category: ensure the FIRST a= is used
            if [[ "$job_name" == *"a="* ]]; then
              first_a=$(printf '%s' "$job_name" | grep -o 'a=[^+[:space:]]*' | head -n1 || true)
              if [[ -n "$first_a" ]]; then
                job_type="${first_a#a=}"
                category_counts["$job_type"]=$(( ${category_counts["$job_type"]:-0} + 1 ))
                category_state_counts["$job_type|$category_label"]=$(( ${category_state_counts["$job_type|$category_label"]:-0} + 1 ))

                # Parse num_jobs if present (sum them)
                num_jobs=$(printf '%s' "$job_name" | sed -n 's/.*num_jobs=\([0-9][0-9]*\).*/\1/p')
                if [[ -n "$num_jobs" ]]; then
                  category_num_jobs["$job_type"]=$(( ${category_num_jobs["$job_type"]:-0} + num_jobs ))
                  total_num_jobs=$(( total_num_jobs + num_jobs ))
                fi
              fi
            fi
          done <<< "$job_list"

          # --- Print summary at the top ---
          echo "===== Job Summary ====="
          printf "%-22s %d\n" "Total jobs:" "$total_jobs_count"
          printf "%-22s %d\n" "Running jobs:" "$running_count"
          printf "%-22s %d\n" "Pending jobs:" "$pending_count"
          printf "%-22s %d\n" "Held jobs:" "$held_count"
          printf "%-22s %d\n" "Completing jobs:" "$completing_count"
          echo ""

          echo "===== Jobs by category (count of jobs) ====="
          for jt in $(printf '%s\n' "${!category_counts[@]}" | sort); do
            printf "%-30s %d\n" "$jt:" "${category_counts[$jt]}"
          done
          echo ""

          echo "===== num_jobs by category ====="
          for jt in $(printf '%s\n' "${!category_counts[@]}" | sort); do
            printf "%-30s %d\n" "$jt:" "${category_num_jobs[$jt]:-0}"
          done
          printf "%-30s %d\n" "Total num_jobs:" "$total_num_jobs"
          echo ""

          echo "===== Jobs by category and state ====="
          for jt in $(printf '%s\n' "${!category_counts[@]}" | sort); do
            printf "%-20s" "$jt:"
            for label in Running Pending Held Completing; do
              count=${category_state_counts["$jt|$label"]}
              if [[ -n "$count" ]]; then
                printf "  %s=%d" "$label" "$count"
              fi
            done
            echo ""
          done
          echo ""

          # --- Raw quota output ---
          echo "===== Quota ====="
          if quota_raw=$(timeout 60s bash -lc "quota" 2>/dev/null); then
            echo "$quota_raw"
          else
            echo "(quota unavailable)"
          fi
          echo ""

          echo "===== Detailed Job Table ====="
          printf "\n%-10s %-120s %-10s %-10s %-30s\n" "JobID" "JobName" "State" "Time" "Reason/Nodelist"
          while IFS='|' read -r job_id job_name state time nodelist; do
            printf "%-10s %-120s %-10s %-10s %-30s\n" "$job_id" "$job_name" "$state" "$time" "$nodelist"
          done <<< "$job_list"
          EOF

      - name: Generate webpage
        run: |
          mkdir -p public
          epoch_ms=$(date +%s000)
          {
            echo "<!DOCTYPE html>"
            echo "<html><head><meta http-equiv=\"refresh\" content=\"60\">"
            echo "<title>HPCC Job Monitor</title></head><body>"
            echo "<h3 id=\"last-updated\">Last Updated: $(TZ=America/New_York date) (<span id='since'></span>)</h3>"
            echo "<script>"
            echo "  const lastUpdate = new Date($epoch_ms);"
            echo "  function updateSince() {"
            echo "    const now = new Date();"
            echo "    const diffMs = now - lastUpdate;"
            echo "    const mins = Math.floor(diffMs / 60000);"
            echo "    const text = mins === 1 ? '1 minute since last update' : mins + ' minutes since last update';"
            echo "    document.getElementById('since').textContent = text;"
            echo "  }"
            echo "  updateSince();"
            echo "  setInterval(updateSince, 60000);"
            echo "</script>"
            echo "<pre>"
            cat job_status.txt
            echo "</pre>"
            echo "</body></html>"
          } > public/index.html

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: fetch-jobs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
