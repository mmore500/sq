name: HPCC Job Monitor

on:
  push:
    branches:
      - master
  schedule:
    - cron: "*/5 * * * *"  # every 5 minutes
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  fetch-jobs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Run job script on HPCC
        id: hpcc
        run: |
          set -e
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.USER }}@hpcc.msu.edu" 'bash -s' <<'EOF' | tee job_status.txt
          job_list=$(squeue -u $USER -o "%.18i %.100j %.2t %.10M %.20R %.30r")

          # --- Counters ---
          held_count=0
          pending_count=0
          running_count=0
          declare -A job_type_counts
          total_jobs=0

          # --- First pass: parse categories + states ---
          while read -r line; do
            if [[ $line == JOBID* ]]; then
              continue
            fi

            # Extract fields
            job_id=$(echo "$line" | awk '{print $1}')
            job_name=$(echo "$line" | awk '{print $2}')
            state=$(echo "$line" | awk '{print $3}')
            nodelist=$(echo "$line" | awk '{print $5}')

            # Count job states
            if [[ "$nodelist" == *"Held"* ]]; then
              held_count=$((held_count + 1))
            fi
            case "$state" in
              R) running_count=$((running_count + 1)) ;;
              PD) pending_count=$((pending_count + 1)) ;;
            esac

            # Parse job type a=...+num_jobs=...
            if [[ "$job_name" == a=* ]]; then
              job_type=$(echo "$job_name" | sed -n 's/.*a=\([^+ ]*\).*/\1/p')
              num_jobs=$(echo "$job_name" | sed -n 's/.*+num_jobs=\([0-9]\+\).*/\1/p')
              if [[ -n "$job_type" && -n "$num_jobs" ]]; then
                job_type_counts["$job_type"]=$(( ${job_type_counts["$job_type"]} + num_jobs ))
                total_jobs=$(( total_jobs + num_jobs ))
              fi
            fi
          done <<< "$job_list"

          # --- Print summary at top ---
          echo "===== Job Summary ====="
          printf "%-30s %d\n" "Held jobs:" $held_count
          printf "%-30s %d\n" "Pending jobs:" $pending_count
          printf "%-30s %d\n" "Running jobs:" $running_count
          echo ""
          echo "===== num_jobs by category ====="
          for jt in "${!job_type_counts[@]}"; do
            printf "%-30s %d\n" "$jt jobs:" "${job_type_counts[$jt]}"
          done
          printf "%-30s %d\n" "Total num_jobs:" $total_jobs
          echo ""
          echo "Quota: " $(bash -i -c "quota" | grep -o '[^ ]\{2,\}%' | tr '\n' ' ')
          echo ""
          echo "===== Detailed Job Table ====="

          # --- Print job table ---
          printf "\n%-10s %-100s %-10s %-10s %-20s\n" "JobID" "JobName" "State" "Time" "Nodelist"
          while read -r line; do
            if [[ $line == JOBID* ]]; then
              continue
            fi
            job_id=$(echo "$line" | awk '{print $1}')
            job_name=$(echo "$line" | awk '{print $2}')
            state=$(echo "$line" | awk '{print $3}')
            time=$(echo "$line" | awk '{print $4}')
            nodelist=$(echo "$line" | awk '{print $5}')
            printf "%-10s %-100s %-10s %-10s %-20s\n" "$job_id" "$job_name" "$state" "$time" "$nodelist"
          done <<< "$job_list"
          EOF

      - name: Generate webpage
        run: |
          mkdir -p public
          {
            echo "<!DOCTYPE html>"
            echo "<html><head><meta http-equiv=\"refresh\" content=\"60\">"
            echo "<title>HPCC Job Monitor</title></head><body>"
            echo "<h3>Last Updated: $(TZ=America/New_York date)</h3>"
            echo "<pre>"
            cat job_status.txt
            echo "</pre>"
            echo "</body></html>"
          } > public/index.html

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: fetch-jobs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
