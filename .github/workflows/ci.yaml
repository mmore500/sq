name: HPCC Job Monitor

on:
  push:
    branches:
      - master
  schedule:
    - cron: "*/5 * * * *"  # every 5 minutes
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  fetch-jobs:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Run job script on HPCC
        id: hpcc
        run: |
          set -e
          # use pipe delimiter to avoid truncation
          sshpass -p "${{ secrets.PASSWORD }}" ssh -o StrictHostKeyChecking=no "${{ secrets.USER }}@hpcc.msu.edu" 'bash -s' <<'EOF' | tee job_status.txt
          job_list=$(squeue --noheader -u "$USER" -o "%i|%j|%t|%M|%R")

          declare -A state_counts
          declare -A category_counts
          declare -A category_num_jobs
          declare -A category_state_counts
          declare -A category_state_numjobs
          total_num_jobs=0

          while IFS='|' read -r job_id job_name state time nodelist; do
            # Increment state totals
            state_counts["$state"]=$(( ${state_counts["$state"]:-0} + 1 ))

            # Extract category (a=...) if present
            if [[ "$job_name" == *"a="* ]]; then
              category=$(printf '%s' "$job_name" | sed -n 's/.*a=\([^+[:space:]]*\).*/\1/p')
              if [[ -n "$category" ]]; then
                category_counts["$category"]=$(( ${category_counts["$category"]:-0} + 1 ))
                category_state_counts["$category|$state"]=$(( ${category_state_counts["$category|$state"]:-0} + 1 ))

                # Extract num_jobs if present
                num_jobs=$(printf '%s' "$job_name" | sed -n 's/.*num_jobs=\([0-9][0-9]*\).*/\1/p')
                if [[ -n "$num_jobs" ]]; then
                  category_num_jobs["$category"]=$(( ${category_num_jobs["$category"]:-0} + num_jobs ))
                  category_state_numjobs["$category|$state"]=$(( ${category_state_numjobs["$category|$state"]:-0} + num_jobs ))
                  total_num_jobs=$(( total_num_jobs + num_jobs ))
                fi
              fi
            fi
          done <<< "$job_list"

          echo "===== Job Summary by State ====="
          for s in R PD CF CG F TO NF S ST; do
            if [[ -n "${state_counts[$s]}" ]]; then
              case "$s" in
                R) label="Running" ;;
                PD) label="Pending" ;;
                CF) label="Configuring" ;;
                CG) label="Completing" ;;
                F) label="Failed" ;;
                TO) label="Timeout" ;;
                NF) label="NodeFail" ;;
                S) label="Suspended" ;;
                ST) label="Stopped" ;;
                *) label="$s" ;;
              esac
              printf "%-15s %d\n" "$label:" "${state_counts[$s]}"
            fi
          done
          echo ""

          echo "===== Jobs by Category (count of jobs) ====="
          for c in $(printf '%s\n' "${!category_counts[@]}" | sort); do
            printf "%-30s %d\n" "$c:" "${category_counts[$c]}"
          done
          echo ""

          echo "===== num_jobs by Category ====="
          for c in $(printf '%s\n' "${!category_counts[@]}" | sort); do
            printf "%-30s %d\n" "$c:" "${category_num_jobs[$c]:-0}"
          done
          printf "%-30s %d\n" "Total num_jobs:" "$total_num_jobs"
          echo ""

          echo "===== Jobs by Category and State (job counts) ====="
          for c in $(printf '%s\n' "${!category_counts[@]}" | sort); do
            printf "%-20s" "$c:"
            for s in R PD CF CG F TO NF S ST; do
              count=${category_state_counts["$c|$s"]}
              if [[ -n "$count" ]]; then
                case "$s" in
                  R) label="Running" ;;
                  PD) label="Pending" ;;
                  CF) label="Configuring" ;;
                  CG) label="Completing" ;;
                  F) label="Failed" ;;
                  TO) label="Timeout" ;;
                  NF) label="NodeFail" ;;
                  S) label="Suspended" ;;
                  ST) label="Stopped" ;;
                  *) label="$s" ;;
                esac
                printf "  %s=%d" "$label" "$count"
              fi
            done
            echo ""
          done
          echo ""

          echo "===== num_jobs by Category and State ====="
          for c in $(printf '%s\n' "${!category_counts[@]}" | sort); do
            printf "%-20s" "$c:"
            for s in R PD CF CG F TO NF S ST; do
              nj=${category_state_numjobs["$c|$s"]}
              if [[ -n "$nj" ]]; then
                case "$s" in
                  R) label="Running" ;;
                  PD) label="Pending" ;;
                  CF) label="Configuring" ;;
                  CG) label="Completing" ;;
                  F) label="Failed" ;;
                  TO) label="Timeout" ;;
                  NF) label="NodeFail" ;;
                  S) label="Suspended" ;;
                  ST) label="Stopped" ;;
                  *) label="$s" ;;
                esac
                printf "  %s=%d" "$label" "$nj"
              fi
            done
            echo ""
          done
          echo ""

          echo "Quota: " $(bash -i -c "quota" | grep -o '[^ ]\{2,\}%' | tr '\n' ' ')
          echo ""
          echo "===== Detailed Job Table ====="
          printf "\n%-10s %-120s %-10s %-10s %-30s\n" "JobID" "JobName" "State" "Time" "Nodelist/Reason"
          while IFS='|' read -r job_id job_name state time nodelist; do
            printf "%-10s %-120s %-10s %-10s %-30s\n" "$job_id" "$job_name" "$state" "$time" "$nodelist"
          done <<< "$job_list"
          EOF

      - name: Generate webpage
        run: |
          mkdir -p public
          {
            echo "<!DOCTYPE html>"
            echo "<html><head><meta http-equiv=\"refresh\" content=\"60\">"
            echo "<title>HPCC Job Monitor</title></head><body>"
            echo "<h3>Last Updated: $(TZ=America/New_York date)</h3>"
            echo "<pre>"
            cat job_status.txt
            echo "</pre>"
            echo "</body></html>"
          } > public/index.html

      - name: Upload artifact for GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: fetch-jobs
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
